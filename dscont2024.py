# -*- coding: utf-8 -*-
"""dscont2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bX27g3ctK21b2hFfa0CqJ24lHeiZGqUg
"""

import folium
import requests
from IPython.display import display, HTML

# Your TomTom API key
API_KEY = 'Zve1njLiClqBEIwrB7QMtC9GUyabuUKu'

# Coordinates for Chiang Mai and Bangkok
origin_coords = (18.8082388, 99.0076453)  # Chiang Mai
destination_coords = (13.7577439, 100.5162577)  # Bangkok

# Vehicle options
vehicles = {
    "Isuzu FVM300": {
        "flat_kmpl": 2.5,  # km per liter on flat terrain
        "mountain_kmpl": 1.25,  # km per liter in mountains
        "engine_info": "Isuzu FVM300, 7,790 cc, 221 kW, 981 Nm"
    },
    "UD Quester": {
        "flat_kmpl": 3.5,  # km per liter on flat terrain
        "mountain_kmpl": 2.5,  # km per liter in mountains
        "engine_info": "UD Quester, 8,000 cc, 161 kW, 1200 Nm"
    }
}

# TomTom Routing API endpoint
def get_route_details(origin, destination, api_key):
    url = f"https://api.tomtom.com/routing/1/calculateRoute/{origin}:{destination}/json"
    params = {
        'key': api_key,
        'routeType': 'fastest',  # Calculate fastest route
        'traffic': 'false',  # Disable traffic for basic routing
        'instructionsType': 'coded'
    }
    response = requests.get(url, params=params).json()
    distance_km = response['routes'][0]['summary']['lengthInMeters'] / 1000  # Convert to km
    travel_time_sec = response['routes'][0]['summary']['travelTimeInSeconds'] / 3600  # Convert to hours
    route_geometry = response['routes'][0]['legs'][0]['points']  # List of route points (latitude, longitude)
    return route_geometry, distance_km, travel_time_sec

# Calculate fuel usage, cost, emissions, and carbon credits
def calculate_fuel_usage(vehicle, distance_km, fuel_price_per_liter):
    flat_kmpl = vehicle["flat_kmpl"]
    mountain_kmpl = vehicle["mountain_kmpl"]
    mountain_distance_km = 100  # Approximate distance through mountains
    flat_distance_km = distance_km - mountain_distance_km

    # Fuel usage calculations
    fuel_used_flat = flat_distance_km / flat_kmpl
    fuel_used_mountain = mountain_distance_km / mountain_kmpl
    total_fuel_used = fuel_used_flat + fuel_used_mountain
    total_cost = total_fuel_used * fuel_price_per_liter
    carbon_emissions_kg = total_fuel_used * 2.68  # kg CO2 per liter
    carbon_credits = carbon_emissions_kg / 1000  # 1 carbon credit per ton (1000 kg)

    return total_fuel_used, total_cost, carbon_emissions_kg, carbon_credits

# Create a Folium map to display the route, fuel info, and carbon credits
def create_map(route_geometry, origin_coords, destination_coords, fuel_info, vehicle_name):
    mid_point = [(origin_coords[0] + destination_coords[0]) / 2, (origin_coords[1] + destination_coords[1]) / 2]
    map_route = folium.Map(location=mid_point, zoom_start=6)

    # Add markers for start and end points
    folium.Marker(location=origin_coords, popup='Chiang Mai', icon=folium.Icon(color='green')).add_to(map_route)
    folium.Marker(location=destination_coords, popup='Bangkok', icon=folium.Icon(color='red')).add_to(map_route)

    # Convert the route geometry points into lat/lon tuples
    route_points = [(point['latitude'], point['longitude']) for point in route_geometry]

    # Add the route polyline to the map
    folium.PolyLine(route_points, color='blue', weight=5, opacity=0.7).add_to(map_route)

    # Add fuel consumption and carbon credit info to the bottom-right corner
    fuel_info_html = f"""
    <div style="position: fixed;
                bottom: 50px; left: 50px; width: 300px; height: 150px;
                border:2px solid grey; z-index:9999; font-size:14px;
                background-color:white; padding: 10px;">
        <b>{vehicle_name}</b><br>
        Total Fuel Used: {fuel_info['fuel_used']:.2f} liters<br>
        Total Cost: {fuel_info['cost']:.2f} THB<br>
        CO2 Emissions: {fuel_info['emissions']:.2f} kg<br>
        Carbon Credits Needed: {fuel_info['carbon_credits']:.2f} credits
    </div>
    """
    # Add the custom HTML to the map
    map_route.get_root().html.add_child(folium.Element(fuel_info_html))

    return map_route

# Main function
def main():
    # Get user input for diesel price
    fuel_price_per_liter = float(input("Enter Diesel Price (THB per liter): "))

    # Select vehicle
    print("Select a vehicle for the delivery:")
    for i, vehicle in enumerate(vehicles.keys(), 1):
        print(f"{i}. {vehicle}")

    vehicle_choice = int(input("Enter the number corresponding to your vehicle choice: ")) - 1
    selected_vehicle_name = list(vehicles.keys())[vehicle_choice]
    selected_vehicle = vehicles[selected_vehicle_name]

    # Get route details
    route_geometry, distance_km, travel_time_hr = get_route_details(f"{origin_coords[0]},{origin_coords[1]}", f"{destination_coords[0]},{destination_coords[1]}", API_KEY)

    # Calculate fuel usage, cost, emissions, and carbon credits
    fuel_used, total_cost, emissions, carbon_credits = calculate_fuel_usage(selected_vehicle, distance_km, fuel_price_per_liter)

    # Prepare fuel info to display on map
    fuel_info = {
        'fuel_used': fuel_used,
        'cost': total_cost,
        'emissions': emissions,
        'carbon_credits': carbon_credits
    }

    # Print route summary
    print(f"Vehicle: {selected_vehicle_name}")
    print(f"Distance: {distance_km:.2f} km")
    print(f"Travel Time: {travel_time_hr:.2f} hours")
    print(f"Total Fuel Used: {fuel_used:.2f} liters")
    print(f"Total Cost: {total_cost:.2f} THB")
    print(f"Total CO2 Emissions: {emissions:.2f} kg")
    print(f"Carbon Credits Needed: {carbon_credits:.2f} credits")

    # Create and display the map with fuel info and carbon credits
    map_route = create_map(route_geometry, origin_coords, destination_coords, fuel_info, selected_vehicle_name)

    # Display map directly in Google Colab
    display(HTML(map_route._repr_html_()))

if __name__ == "__main__":
    main()